// This file is automatically generated.
using System;
using System.Text;
using System.Runtime.InteropServices;
using Steam4NET.Attributes;

namespace Steam4NET
{

	[InterfaceVersion("CLIENTUTILS_INTERFACE_VERSION001")]
	public interface IClientUtils
	{
		[VTableSlot(0)]
		string GetInstallPath();
		[VTableSlot(1)]
		string GetUserBaseFolderInstallImage();
		[VTableSlot(2)]
		string GetManagedContentRoot();
		[VTableSlot(3)]
		UInt32 GetSecondsSinceAppActive();
		[VTableSlot(4)]
		UInt32 GetSecondsSinceComputerActive();
		[VTableSlot(5)]
		void SetComputerActive();
		[VTableSlot(6)]
		EUniverse GetConnectedUniverse();
		[VTableSlot(7)]
		UInt32 GetServerRealTime();
		[VTableSlot(8)]
		string GetIPCountry();
		[VTableSlot(9)]
		bool GetImageSize(Int32 iImage, ref UInt32 pnWidth, ref UInt32 pnHeight);
		[VTableSlot(10)]
		bool GetImageRGBA(Int32 iImage, Byte[] pubDest, Int32 nDestBufferSize);
		[VTableSlot(11)]
		bool GetCSERIPPort(ref UInt32 unIP, ref UInt16 usPort);
		[VTableSlot(12)]
		UInt32 GetNumRunningApps();
		[VTableSlot(13)]
		Byte GetCurrentBatteryPower();
		[VTableSlot(14)]
		void SetOfflineMode(bool bOffline);
		[VTableSlot(15)]
		bool GetOfflineMode();
		[VTableSlot(16)]
		UInt32 SetAppIDForCurrentPipe(UInt32 nAppID, bool bTrackProcess);
		[VTableSlot(17)]
		UInt32 GetAppID();
		[VTableSlot(18)]
		void SetAPIDebuggingActive(bool bActive, bool bVerbose);
		[VTableSlot(19)]
		Int32 AllocPendingAPICallHandle();
		[VTableSlot(20)]
		bool IsAPICallCompleted(UInt64 hSteamAPICall, ref bool pbFailed);
		[VTableSlot(21)]
		ESteamAPICallFailure GetAPICallFailureReason(UInt64 hSteamAPICall);
		[VTableSlot(22)]
		bool GetAPICallResult(UInt64 hSteamAPICall, Byte[] pCallback, Int32 cubCallback, Int32 iCallbackExpected, ref bool pbFailed);
		[VTableSlot(23)]
		void PostInProcAPICallResult(UInt64 arg0, Byte[] arg1, Int32 arg2, Int32 arg3);
		[VTableSlot(24)]
		bool SignalAppsToShutDown();
		[VTableSlot(25)]
		bool SignalServiceAppsToDisconnect();
		[VTableSlot(26)]
		bool TerminateAllAppsMultiStep(UInt32 uUnk);
		[VTableSlot(27)]
		UInt32 GetCellID();
		[VTableSlot(28)]
		bool BIsGlobalInstance();
		[VTableSlot(29)]
		UInt64 CheckFileSignature(string szFileName);
		[VTableSlot(30)]
		UInt64 GetBuildID();
		[VTableSlot(31)]
		void SetCurrentUIMode(EUIMode eUIMode);
		[VTableSlot(32)]
		EUIMode GetCurrentUIMode();
		[VTableSlot(33)]
		void SetLauncherType(ELauncherType eLauncherType);
		[VTableSlot(34)]
		ELauncherType GetLauncherType();
		[VTableSlot(35)]
		bool ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eInputLineMode, string szText, UInt32 uMaxLength, string szUnk);
		[VTableSlot(36)]
		UInt32 GetEnteredGamepadTextLength();
		[VTableSlot(37)]
		bool GetEnteredGamepadTextInput(StringBuilder pchValue, UInt32 cchValueMax);
		[VTableSlot(38)]
		void GamepadTextInputClosed(Int32 hSteamPipe, bool arg1, string arg2);
		[VTableSlot(39)]
		void SetSpew(ESpewGroup eSpewGroup, Int32 iSpewLevel, Int32 iLogLevel);
		[VTableSlot(40)]
		bool BDownloadsDisabled();
		[VTableSlot(41)]
		void SetFocusedWindow(EWindowType eWindowType, CGameID gameID, UInt64 ulUnk);
		[VTableSlot(42)]
		string GetSteamUILanguage();
		[VTableSlot(43)]
		UInt64 CheckSteamReachable();
		[VTableSlot(44)]
		void SetLastGameLaunchMethod(EGameLaunchMethod eGameLaunchMethod);
		[VTableSlot(45)]
		void SetVideoAdapterInfo(Int32 arg0, Int32 arg1, Int32 arg2, Int32 arg3, Int32 arg4);
		[VTableSlot(46)]
		void SetControllerOverrideMode(CGameID gameID, string szUnk);
		[VTableSlot(47)]
		void SetOverlayWindowFocusForPipe(bool arg0, bool arg1, CGameID gameID);
		[VTableSlot(48)]
		CGameID GetGameOverlayUIInstanceFocusGameID(ref bool pbUnk);
		[VTableSlot(49)]
		bool SetControllerConfigFileForAppID(UInt32 unAppID, string pszControllerConfigFile);
		[VTableSlot(50)]
		bool GetControllerConfigFileForAppID(UInt32 unAppID, string pszControllerConfigFile, UInt32 cubControllerConfigFile);
		[VTableSlot(51)]
		bool IsSteamRunningInVR();
		[VTableSlot(52)]
		bool BIsRunningOnAlienwareAlpha();
		[VTableSlot(53)]
		void StartVRDashboard();
		[VTableSlot(54)]
		bool IsVRHeadsetStreamingEnabled(UInt32 unk);
		[VTableSlot(55)]
		void SetVRHeadsetStreamingEnabled(UInt32 unk, bool arg1);
		[VTableSlot(56)]
		Int32 GenerateSupportSystemReport();
		[VTableSlot(57)]
		bool GetSupportSystemReport(StringBuilder arg0, UInt32 unk, Byte[] unk_2, UInt32 unk_3);
		[VTableSlot(58)]
		UInt32 GetAppIdForPid(UInt32 unk);
		[VTableSlot(59)]
		void SetClientUIProcess();
		[VTableSlot(60)]
		bool BIsClientUIInForeground();
	};
}
