// This file is automatically generated.
using System;
using System.Text;
using System.Runtime.InteropServices;
using Steam4NET.Attributes;

namespace Steam4NET
{

	[InterfaceVersion("SteamUtils009")]
	public interface ISteamUtils009
	{
		[VTableSlot(0)]
		UInt32 GetSecondsSinceAppActive();
		[VTableSlot(1)]
		UInt32 GetSecondsSinceComputerActive();
		[VTableSlot(2)]
		EUniverse GetConnectedUniverse();
		[VTableSlot(3)]
		UInt32 GetServerRealTime();
		[VTableSlot(4)]
		string GetIPCountry();
		[VTableSlot(5)]
		bool GetImageSize(Int32 iImage, ref UInt32 pnWidth, ref UInt32 pnHeight);
		[VTableSlot(6)]
		bool GetImageRGBA(Int32 iImage, Byte[] pubDest, Int32 nDestBufferSize);
		[VTableSlot(7)]
		bool GetCSERIPPort(ref UInt32 unIP, ref UInt16 usPort);
		[VTableSlot(8)]
		Byte GetCurrentBatteryPower();
		[VTableSlot(9)]
		UInt32 GetAppID();
		[VTableSlot(10)]
		void SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition);
		[VTableSlot(11)]
		bool IsAPICallCompleted(UInt64 hSteamAPICall, ref bool pbFailed);
		[VTableSlot(12)]
		ESteamAPICallFailure GetAPICallFailureReason(UInt64 hSteamAPICall);
		[VTableSlot(13)]
		bool GetAPICallResult(UInt64 hSteamAPICall, Byte[] pCallback, Int32 cubCallback, Int32 iCallbackExpected, ref bool pbFailed);
		[VTableSlot(14)]
		void RunFrame();
		[VTableSlot(15)]
		UInt32 GetIPCCallCount();
		[VTableSlot(16)]
		void SetWarningMessageHook(ref IntPtr pFunction);
		[VTableSlot(17)]
		bool IsOverlayEnabled();
		[VTableSlot(18)]
		bool BOverlayNeedsPresent();
		[VTableSlot(19)]
		UInt64 CheckFileSignature(string szFileName);
		[VTableSlot(20)]
		bool ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eInputLineMode, string pchDescription, UInt32 unCharMax, string pchExistingText);
		[VTableSlot(21)]
		UInt32 GetEnteredGamepadTextLength();
		[VTableSlot(22)]
		bool GetEnteredGamepadTextInput(StringBuilder pchValue, UInt32 cchValueMax);
		[VTableSlot(23)]
		string GetSteamUILanguage();
		[VTableSlot(24)]
		bool IsSteamRunningInVR();
		[VTableSlot(25)]
		void SetOverlayNotificationInset(Int32 arg0, Int32 arg1);
		[VTableSlot(26)]
		bool IsSteamInBigPictureMode();
		[VTableSlot(27)]
		void StartVRDashboard();
		[VTableSlot(28)]
		bool IsVRHeadsetStreamingEnabled();
		[VTableSlot(29)]
		void SetVRHeadsetStreamingEnabled(bool arg0);
	};
}
