// This file is automatically generated.
using System;
using System.Text;
using System.Runtime.InteropServices;
using Steam4NET.Attributes;

namespace Steam4NET
{

	[InterfaceVersion("CLIENTREMOTESTORAGE_INTERFACE_VERSION001")]
	public interface IClientRemoteStorage
	{
		[VTableSlot(0)]
		EResult FileWrite(UInt32 nAppId, ERemoteStorageFileRoot eRemoteStorageFileRoot, string pchFile, Byte[] pvData, Int32 cubData);
		[VTableSlot(1)]
		Int32 GetFileSize(UInt32 nAppId, ERemoteStorageFileRoot eRemoteStorageFileRoot, string pchFile);
		[VTableSlot(2)]
		UInt64 FileWriteAsync(UInt32 nAppId, ERemoteStorageFileRoot eRemoteStorageFileRoot, string arg2, ref CUtlBuffer arg3);
		[VTableSlot(3)]
		UInt64 FileReadAsync(UInt32 nAppId, ERemoteStorageFileRoot eRemoteStorageFileRoot, string arg2, UInt32 arg3, UInt32 arg4);
		[VTableSlot(4)]
		bool FileReadAsyncComplete(UInt32 nAppId, UInt64 arg1, Byte[] arg2, UInt32 arg3);
		[VTableSlot(5)]
		Int32 FileRead(UInt32 nAppId, ERemoteStorageFileRoot eRemoteStorageFileRoot, string pchFile, Byte[] pvData, Int32 cubDataToRead);
		[VTableSlot(6)]
		bool FileForget(UInt32 nAppId, ERemoteStorageFileRoot eRemoteStorageFileRoot, string pchFile);
		[VTableSlot(7)]
		bool FileDelete(UInt32 nAppId, ERemoteStorageFileRoot eRemoteStorageFileRoot, string pchFile);
		[VTableSlot(8)]
		UInt64 FileShare(UInt32 nAppId, ERemoteStorageFileRoot eRemoteStorageFileRoot, string pchFile);
		[VTableSlot(9)]
		bool FileExists(UInt32 nAppId, ERemoteStorageFileRoot eRemoteStorageFileRoot, string pchFile);
		[VTableSlot(10)]
		bool FilePersisted(UInt32 nAppId, ERemoteStorageFileRoot eRemoteStorageFileRoot, string pchFile);
		[VTableSlot(11)]
		Int64 GetFileTimestamp(UInt32 nAppId, ERemoteStorageFileRoot eRemoteStorageFileRoot, string pchFile);
		[VTableSlot(12)]
		bool SetSyncPlatforms(UInt32 nAppId, ERemoteStorageFileRoot eRemoteStorageFileRoot, string pchFile, ERemoteStoragePlatform eRemoteStoragePlatform);
		[VTableSlot(13)]
		ERemoteStoragePlatform GetSyncPlatforms(UInt32 nAppId, ERemoteStorageFileRoot eRemoteStorageFileRoot, string pchFile);
		[VTableSlot(14)]
		UInt64 FileWriteStreamOpen(UInt32 nAppId, ERemoteStorageFileRoot eRemoteStorageFileRoot, string pchFile);
		[VTableSlot(15)]
		EResult FileWriteStreamClose(UInt64 hStream);
		[VTableSlot(16)]
		EResult FileWriteStreamCancel(UInt64 hStream);
		[VTableSlot(17)]
		EResult FileWriteStreamWriteChunk(UInt64 hStream, Byte[] pvData, Int32 cubData);
		[VTableSlot(18)]
		Int32 GetFileCount(UInt32 nAppId, bool bFromExternalAPI);
		[VTableSlot(19)]
		string GetFileNameAndSize(UInt32 nAppId, Int32 iFile, ref ERemoteStorageFileRoot peRemoteStorageFileRoot, ref Int32 pnFileSizeInBytes, bool bFromExternalAPI);
		[VTableSlot(20)]
		bool GetQuota(UInt32 nAppId, ref UInt64 pnTotalBytes, ref UInt64 pnAvailableBytes);
		[VTableSlot(21)]
		bool IsCloudEnabledForAccount();
		[VTableSlot(22)]
		bool IsCloudEnabledForApp(UInt32 nAppId);
		[VTableSlot(23)]
		void SetCloudEnabledForApp(UInt32 nAppId, bool bEnable);
		[VTableSlot(24)]
		UInt64 UGCDownload(UInt64 hContent, bool bUseNewCallback, UInt32 uUnk);
		[VTableSlot(25)]
		UInt64 UGCDownloadToLocation(UInt64 hContent, string cszLocation, UInt32 uUnk);
		[VTableSlot(26)]
		bool GetUGCDownloadProgress(UInt64 hContent, ref UInt32 puDownloadedBytes, ref UInt32 puTotalBytes);
		[VTableSlot(27)]
		bool GetUGCDetails(UInt64 hContent, ref UInt32 pnAppID, StringBuilder ppchName, ref Int32 pnFileSizeInBytes, ref CSteamID pSteamIDOwner);
		[VTableSlot(28)]
		Int32 UGCRead(UInt64 hContent, Byte[] pvData, Int32 cubDataToRead, UInt32 uOffset, EUGCReadAction eAction);
		[VTableSlot(29)]
		Int32 GetCachedUGCCount();
		[VTableSlot(30)]
		UInt64 GetCachedUGCHandle(Int32 iCachedContent);
		[VTableSlot(31)]
		UInt64 PublishFile(UInt32 nAppId, ERemoteStorageFileRoot eRemoteStorageFileRoot, string cszFileName, string cszPreviewFileName, UInt32 nConsumerAppId, string cszTitle, string cszDescription, ERemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags, EWorkshopFileType eType);
		[VTableSlot(32)]
		UInt64 PublishVideo(UInt32 nAppId, EWorkshopVideoProvider eVideoProvider, string cszVideoAccountName, string cszVideoIdentifier, ERemoteStorageFileRoot eRemoteStorageFileRoot, string cszFileName, UInt32 nConsumerAppId, string cszTitle, string cszDescription, ERemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags);
		[VTableSlot(33)]
		UInt64 PublishVideoFromURL(UInt32 nAppId, ERemoteStorageFileRoot eRemoteStorageFileRoot, string cszVideoURL, string cszFileName, UInt32 nConsumerAppId, string cszTitle, string cszDescription, ERemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags);
		[VTableSlot(34)]
		UInt64 CreatePublishedFileUpdateRequest(UInt32 nAppId, UInt64 unPublishedFileId);
		[VTableSlot(35)]
		bool UpdatePublishedFileFile(UInt64 hUpdateRequest, string cszFile);
		[VTableSlot(36)]
		bool UpdatePublishedFilePreviewFile(UInt64 hUpdateRequest, string cszPreviewFile);
		[VTableSlot(37)]
		bool UpdatePublishedFileTitle(UInt64 hUpdateRequest, string cszTitle);
		[VTableSlot(38)]
		bool UpdatePublishedFileDescription(UInt64 hUpdateRequest, string cszDescription);
		[VTableSlot(39)]
		bool UpdatePublishedFileSetChangeDescription(UInt64 hUpdateRequest, string cszDescription);
		[VTableSlot(40)]
		bool UpdatePublishedFileVisibility(UInt64 hUpdateRequest, ERemoteStoragePublishedFileVisibility eVisibility);
		[VTableSlot(41)]
		bool UpdatePublishedFileTags(UInt64 hUpdateRequest, ref SteamParamStringArray_t pTags);
		[VTableSlot(42)]
		bool UpdatePublishedFileURL(UInt64 hUpdateRequest, string cszURL);
		[VTableSlot(43)]
		UInt64 CommitPublishedFileUpdate(UInt32 nAppId, ERemoteStorageFileRoot eRemoteStorageFileRoot, UInt64 hUpdateRequest);
		[VTableSlot(44)]
		UInt64 GetPublishedFileDetails(UInt64 unPublishedFileId, bool bUseNewCallback, UInt32 arg2);
		[VTableSlot(45)]
		UInt64 DeletePublishedFile(UInt64 unPublishedFileId);
		[VTableSlot(46)]
		UInt64 EnumerateUserPublishedFiles(UInt32 nAppId, UInt32 uStartIndex, ERemoteStoragePublishedFileSortOrder eOrder);
		[VTableSlot(47)]
		UInt64 SubscribePublishedFile(UInt32 nAppId, UInt64 unPublishedFileId);
		[VTableSlot(48)]
		UInt64 EnumerateUserSubscribedFiles(UInt32 nAppId, UInt32 uStartIndex, Byte uListType, EPublishedFileInfoMatchingFileType eMatchingFileType);
		[VTableSlot(49)]
		UInt64 UnsubscribePublishedFile(UInt32 nAppId, UInt64 unPublishedFileId);
		[VTableSlot(50)]
		UInt64 SetUserPublishedFileAction(UInt32 nAppId, UInt64 unPublishedFileId, EWorkshopFileAction eAction);
		[VTableSlot(51)]
		UInt64 EnumeratePublishedFilesByUserAction(UInt32 nAppId, EWorkshopFileAction eAction, UInt32 uStartIndex);
		[VTableSlot(52)]
		UInt64 EnumerateUserSubscribedFilesWithUpdates(UInt32 nAppId, UInt32 uStartIndex, UInt32 uStartTime);
		[VTableSlot(53)]
		UInt64 GetCREItemVoteSummary(UInt64 unPublishedFileId);
		[VTableSlot(54)]
		UInt64 UpdateUserPublishedItemVote(UInt64 unPublishedFileId, bool bVoteUp);
		[VTableSlot(55)]
		UInt64 GetUserPublishedItemVoteDetails(UInt64 unPublishedFileId);
		[VTableSlot(56)]
		UInt64 EnumerateUserSharedWorkshopFiles(UInt32 nAppId, CSteamID creatorSteamID, UInt32 uStartIndex, ref SteamParamStringArray_t pRequiredTags, ref SteamParamStringArray_t pExcludedTags);
		[VTableSlot(57)]
		UInt64 EnumeratePublishedWorkshopFiles(UInt32 nAppId, EWorkshopEnumerationType eType, EPublishedFileInfoMatchingFileType eFileType, UInt32 uStartIndex, UInt32 cDays, UInt32 cCount, ref SteamParamStringArray_t pTags, ref SteamParamStringArray_t pUserTags);
		[VTableSlot(58)]
		EFileRemoteStorageSyncState EGetFileSyncState(UInt32 nAppId, ERemoteStorageFileRoot eRemoteStorageFileRoot, string pchFile);
		[VTableSlot(59)]
		bool BIsFileSyncing(UInt32 nAppId, ERemoteStorageFileRoot eRemoteStorageFileRoot, string pchFile);
		[VTableSlot(60)]
		EResult FilePersist(UInt32 nAppId, ERemoteStorageFileRoot eRemoteStorageFileRoot, string pchFile);
		[VTableSlot(61)]
		bool FileFetch(UInt32 nAppId, ERemoteStorageFileRoot eRemoteStorageFileRoot, string pchFile);
		[VTableSlot(62)]
		bool ResolvePath(UInt32 nAppID, ERemoteStorageFileRoot eRemoteStorageFileRoot, string pchRelPath, StringBuilder pchDest, UInt32 cchDest);
		[VTableSlot(63)]
		EResult FileTouch(UInt32 nAppId, ERemoteStorageFileRoot eRemoteStorageFileRoot, string pchFile, bool arg3);
		[VTableSlot(64)]
		void SetCloudEnabledForAccount(bool bEnabled);
		[VTableSlot(65)]
		void LoadLocalFileInfoCache(UInt32 nAppId);
		[VTableSlot(66)]
		void EvaluateRemoteStorageSyncState(UInt32 nAppId, bool bUnk);
		[VTableSlot(67)]
		ERemoteStorageSyncState GetRemoteStorageSyncState(UInt32 nAppId);
		[VTableSlot(68)]
		bool HaveLatestFilesLocally(UInt32 nAppId);
		[VTableSlot(69)]
		bool GetConflictingFileTimestamps(UInt32 nAppId, ref UInt32 pnTimestampLocal, ref UInt32 pnTimestampRemote);
		[VTableSlot(70)]
		bool ResolveSyncConflict(UInt32 nAppId, bool bAcceptLocalFiles);
		[VTableSlot(71)]
		bool SynchronizeApp(UInt32 nAppId, bool bSyncClient, bool bSyncServer);
		[VTableSlot(72)]
		bool IsAppSyncInProgress(UInt32 nAppId);
		[VTableSlot(73)]
		void RunAutoCloudOnAppLaunch(UInt32 nAppId);
		[VTableSlot(74)]
		void RunAutoCloudOnAppExit(UInt32 nAppId);
		[VTableSlot(75)]
		bool ResetFileRequestState(UInt32 nAppId);
		[VTableSlot(76)]
		void ClearPublishFileUpdateRequests(UInt32 nAppId);
		[VTableSlot(77)]
		Int32 GetSubscribedFileDownloadCount();
		[VTableSlot(78)]
		bool BGetSubscribedFileDownloadInfo(Int32 iFile, ref UInt64 punPublishedFileId, ref UInt32 puBytesDownloaded, ref UInt32 puBytesExpected, ref UInt32 pnAppId);
		[VTableSlot(79)]
		bool BGetSubscribedFileDownloadInfo(UInt64 unPublishedFileId, ref UInt32 puBytesDownloaded, ref UInt32 puBytesExpected, ref UInt32 pnAppId);
		[VTableSlot(80)]
		void PauseSubscribedFileDownloadsForApp(UInt32 nAppId);
		[VTableSlot(81)]
		void ResumeSubscribedFileDownloadsForApp(UInt32 nAppId);
		[VTableSlot(82)]
		void PauseAllSubscribedFileDownloads();
		[VTableSlot(83)]
		void ResumeAllSubscribedFileDownloads();
	};
}
